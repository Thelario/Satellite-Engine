#include "Shader.h"

namespace Satellite
{
	namespace Graphics
	{
		using namespace Utils;

		Shader::Shader(const char* vertPath, const char* fragPath) : _vertPath(vertPath), _fragPath(fragPath)
		{
			_shaderId = load();
		}

		Shader::~Shader()
		{
			glDeleteProgram(_shaderId); // Frees the memory and invalidates the name associated with the object specified by _shaderId
		}

		GLuint Shader::load()
		{
			GLuint program = glCreateProgram(); // We create an empty program object and returns a non-zero value by which it can be referenced
			GLuint vertex = glCreateShader(GL_VERTEX_SHADER); // We create an empty shader object of type GL_VERTEX_SHADER
			GLuint fragment = glCreateShader(GL_FRAGMENT_SHADER); // We create an empty shader object of type GL_FRAGMENT_SHADER

			std::string vertSourceString = FileUtils::read_file(_vertPath); // We read the vertex file passed in the path
			std::string fragSourceString = FileUtils::read_file(_fragPath); // We read the fragment file passed in the path

			const char* vertSource = vertSourceString.c_str();
			const char* fragSource = fragSourceString.c_str();

			// We set the source code in vertex to the source code that we have read and saved in vertSource, and then we compile the shader
			glShaderSource(vertex, 1, &vertSource, NULL); 
			glCompileShader(vertex);

			GLint result;
			glGetShaderiv(vertex, GL_COMPILE_STATUS, &result); // We get whether the last compilation on shader vertex was succesful or not and save it in result
			if (result == GL_FALSE) // If the shader compilation is not successful
			{
				GLint length;
				glGetShaderiv(vertex, GL_INFO_LOG_LENGTH, &length);
				std::vector<char> error(length);
				glGetShaderInfoLog(vertex, length, &length, &error[0]); // Returns the information log for a shader object
				std::cout << "Failed to compile vertex shader! " << std::endl << &error[0] << std::endl;
				glDeleteShader(vertex); // Frees the memory and invalidates the name associated with the shader object specified by shader
				return 0;
			}

			// We set the source code in fragment to the source code that we have read and saved in fragSource, and then we compile the shader
			glShaderSource(fragment, 1, &fragSource, NULL);
			glCompileShader(fragment);

			glGetShaderiv(fragment, GL_COMPILE_STATUS, &result);
			if (result == GL_FALSE)
			{
				GLint length;
				glGetShaderiv(fragment, GL_INFO_LOG_LENGTH, &length);
				std::vector<char> error(length);
				glGetShaderInfoLog(fragment, length, &length, &error[0]);
				std::cout << "Failed to compile fragment shader! " << std::endl <<  & error[0] << std::endl;
				glDeleteShader(fragment);
				return 0;
			}

			// In order to create a complete shader program, there must be a way to specify the list of things that will be linked together. 
			// Program objects provide this mechanism. Shaders that are to be linked together in a program object must first be attached to that program object. 
			// glAttachShader attaches the shader object specified by shader to the program object specified by program. 
			// This indicates that shader will be included in link operations that will be performed on program.
			glAttachShader(program, vertex); 
			glAttachShader(program, fragment); 

			// Links the program object specified by program
			glLinkProgram(program); 
			
			// Checks to see whether the executables contained in program can execute given the current OpenGL state. 
			// The information generated by the validation process will be stored in program's information log.
			glValidateProgram(program);

			// We delete and free the memory of both vertex and frament objects
			glDeleteShader(vertex);
			glDeleteShader(fragment);

			return program;
		}

		GLint Shader::getUniformLocation(const GLchar* name)
		{
			return glGetUniformLocation(_shaderId, name); // Returns an integer that represents the location of a specific uniform variable within a program object
		}

		// glUniform — Specify the value of a uniform variable for the current program object
		// For more information, see: https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glUniform.xhtml

		void Shader::setUniform1f(const GLchar* name, float value)
		{
			glUniform1f(getUniformLocation(name), value);
		}

		void Shader::setUniform1i(const GLchar* name, int value)
		{
			glUniform1i(getUniformLocation(name), value);
		}

		void Shader::setUniform2f(const GLchar* name, Maths::vec2 vector)
		{
			glUniform2f(getUniformLocation(name), vector.x, vector.y);
		}

		void Shader::setUniform3f(const GLchar* name, Maths::vec3 vector)
		{
			glUniform3f(getUniformLocation(name), vector.x, vector.y, vector.z);
		}

		void Shader::setUniform4f(const GLchar* name, Maths::vec4 vector)
		{
			glUniform4f(getUniformLocation(name), vector.x, vector.y, vector.z, vector.w);
		}

		void Shader::setUniformMat4(const GLchar* name, const Maths::mat4& matrix)
		{
			glUniformMatrix4fv(getUniformLocation(name), 1, GL_FALSE, matrix.elements);
		}

		void Shader::enable() const
		{
			glUseProgram(_shaderId); // Installs a program object as part of current rendering state
		}

		void Shader::disable() const
		{
			glUseProgram(0); // Removes the program object as port of the current rendering state
		}
	}
}